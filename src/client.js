// Generated by CoffeeScript 2.3.2
(function() {
  //!/bin/env/ coffee

  // ws_rmi_client.coffee

  var Stack, Stack_Stub, WS_RMI_Client, WS_RMI_Stub, WebSocket, client, log, stack_stub,
    splice = [].splice;

  WebSocket = (typeof window !== "undefined" && window !== null ? window.WebSocket : void 0) || require('ws');

  log = function(msg) {
    return console.log(msg);
  };

  WS_RMI_Client = class WS_RMI_Client {
    constructor(url1) {
      this.connect = this.connect.bind(this);
      this.onOpen = this.onOpen.bind(this);
      this.onMessage = this.onMessage.bind(this);
      this.onClose = this.onClose.bind(this);
      this.onError = this.onError.bind(this);
      this.disconnect = this.disconnect.bind(this);
      this.register = this.register.bind(this);
      this.send_request = this.send_request.bind(this);
      this.handle_response = this.handle_response.bind(this);
      this.url = url1;
      this.registry = {};
      this.cnt = 0;
      this.cb_hash = {};
      this.stubs = [];
    }

    connect(url) {
      if (url) {
        this.url = url;
      }
      this.server = new WebSocket(this.url);
      this.server.onopen = this.onOpen;
      this.server.onmessage = this.onMessage;
      this.server.onclose = this.onClose;
      this.server.onerror = this.onError;
      return true;
    }

    onOpen(evt) {
      return log(`connected to rmi server at ${this.url}`);
    }

    onMessage(evt) {
      return this.handle_response(evt.data);
    }

    onClose(evt) {}

    onError(evt) {}

    disconnect() {
      return this.server.close();
    }

    register(stub) {
      this.stubs.push(stub);
      return stub.register(this);
    }

    send_request(obj_id, name, args, cb) {
      var cb_id, rmi_args;
      cb_id = this.cnt++;
      this.cb_hash[cb_id] = cb;
      rmi_args = {
        obj_id: obj_id,
        name: name,
        args: args,
        cb_id: cb_id
      };
      return this.server.send(JSON.stringify(rmi_args));
    }

    handle_response(msg) {
      var cb_id, res;
      [cb_id, res] = JSON.parse(msg);
      this.cb_hash[cb_id](res);
      return delete this.cb_hash[cb_id];
    }

  };

  // RMI_Stub is a generic rmi client super class Using it involves
  // extending it and calling the static (class) method 'remote_methods'
  // with a list of the methods available on the remote object.  The
  // resulting methods are just stubs which call the 'invoke' method
  // (below) to contact the remote object server.

  WS_RMI_Stub = class WS_RMI_Stub {
    static add_stub(name) {
      return this.prototype[name] = function(...args) {
        var cb, ref;
        ref = args, [...args] = ref, [cb] = splice.call(args, -1);
        return this.invoke(name, args, cb);
      };
    }

    constructor(id) {
      this.register = this.register.bind(this);
      this.invoke = this.invoke.bind(this);
      this.id = id;
    }

    log_cb(err, res) {
      return console.log(res);
    }

    register(ws_rmi_client) {
      return this.ws_rmi_client = ws_rmi_client;
    }

    invoke(name, args, cb) {
      cb = cb || function() {};
      return this.ws_rmi_client.send_request(this.id, name, args, cb);
    }

  };

  if (typeof window !== "undefined" && window !== null) {
    window.ws_rmi = {
      WS_RMI_Client: WS_RMI_Client,
      WS_RMI_Stub: WS_RMI_Stub
    };
  } else {
    exports.WS_RMI_Client = WS_RMI_Client;
    exports.WS_RMI_Stub = WS_RMI_Stub;
  }

  
  // example_object.coffee
  WS_RMI_Stub = WS_RMI_Stub || require('./ws_rmi_client.coffee').WS_RMI_Stub;

  Stack = class Stack {
    // note that the object must have an id in order to
    // register and operate with the rmi server

    constructor(id) {
      this.push = this.push.bind(this);
      this.pop = this.pop.bind(this);
      this.id = id;
      this.stack = [];
    }

    push(x, cb) {
      this.stack.push(x);
      console.log(this.stack);
      return cb(true);
    }

    pop(cb) {
      cb(this.stack.pop());
      return console.log(this.stack);
    }

  };

  Stack_Stub = (function() {
    class Stack_Stub extends WS_RMI_Stub {};

    Stack_Stub.add_stub('push');

    Stack_Stub.add_stub('pop');

    return Stack_Stub;

  }).call(this);

  exports.Stack = Stack;

  exports.Stack_Stub = Stack_Stub;

  WS_RMI_Client = WS_RMI_Client || require('./ws_rmi_client.coffee').WS_RMI_Client;

  Stack_Stub = Stack_Stub || require('./example_object.coffee').Stack_Stub;

  stack_stub = new Stack_Stub('br549');

  client = new WS_RMI_Client('ws://localhost:8085');

  client.register(stack_stub);

  log = function(res) {
    return console.log(`result: ${res}`);
  };

  exports.stack = stack_stub;

  exports.client = client;

  exports.log = log;

}).call(this);
