// Generated by CoffeeScript 2.4.1
(function() {
    // ws_rmi_client

  // works both in browser and in node
  var RMI_Connection, WS_RMI_Client, WebSocket;

  WebSocket = (typeof window !== "undefined" && window !== null ? window.WebSocket : void 0) || require('ws');

  RMI_Connection = require('./rmi').Connection;

  WS_RMI_Client = class WS_RMI_Client {
    // Connnection should be a sub-class of WS_RMI_Connection in order to
    // create and register desired WS_RMI_Objects at construction.

    constructor(objects, options = {}, Connection) {
      var ref, ref1, ref2, ref3, ref4, ref5, ref6;
      //--------------------------------------------------------------------
      // connect() method

      this.connect = this.connect.bind(this);
      //--------------------------------------------------------------------
      // disconnect() method

      this.disconnect = this.disconnect.bind(this);
      this.objects = objects;
      this.options = options;
      this.id = `WS_RMI_Client-${(Math.random().toString().slice(2))}`;
      this.log_level = ((ref = this.options) != null ? ref.log_level : void 0) || 2;
      this.log = ((ref1 = this.options) != null ? ref1.log : void 0) || console.log;
      this.protocol = ((ref2 = this.options) != null ? ref2.protocol : void 0) || 'ws+unix';
      if (this.protocol === 'ws+unix') {
        this.path = ((ref3 = this.options) != null ? ref3.path : void 0) || '/tmp/ipc_rmi';
        this.url = `ws+unix://${this.path}`;
      } else {
        this.host = ((ref4 = this.options) != null ? ref4.host : void 0) || localhost;
        this.port = ((ref5 = this.options) != null ? ref5.port : void 0) || 8007;
        this.path = ((ref6 = this.options) != null ? ref6.path : void 0) || '';
        this.url = `${this.protocol}://${this.host}:${this.port}/${this.path}`;
      }
      this.connection = null;
      this.Connection = Connection || RMI_Connection;
    }

    connect(url) {
      this.log("RMI_Client.connect():", {
        id: this.id
      });
      return new Promise((resolve, reject) => {
        var error, msg;
        try {
          if (url) {
            this.url = url;
          }
          // Note: This is screwed up !!!
          // new WebSocket(@url) connects automatically but ws.onOpen
          // cannot be set until AFTER the ws object is constructed!
          // So the 'open' event can be emitted BEFORE the handler is set!
          // See note below ...

          this.ws = new WebSocket(this.url);
          // Note: @ws exists but is not necessarily ready yet.  This
          // issue is addressed in the WS_RMI_Connection.send_message()
          // method (q.v.)

          this.connection = new this.Connection(this, this.ws, this.options);
          return resolve(this.connection);
        } catch (error1) {
          error = error1;
          msg = "\nWS_RMI_Client: connect failed.\n";
          msg += error.toString() + '\n';
          msg += error.stack.split('\n').filter(function(x) {
            return /ws-rmi/.test(x);
          }).join('\n');
          return this.log(msg);
        }
      });
    }

    disconnect() {
      if (this.log_level > 0) {
        this.log("disconnecting:", {
          id: this.id
        });
      }
      return this.ws.close();
    }

  };

  module.exports = WS_RMI_Client;

}).call(this);
