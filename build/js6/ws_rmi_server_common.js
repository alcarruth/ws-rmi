// Generated by CoffeeScript 2.3.2
(function() {
  //!/bin/env/ coffee

  // ws_rmi_server_common.coffee

  var WS_RMI_Server_Common, WebSocket, log;

  WebSocket = require('ws');

  log = function(msg) {
    return console.log(msg);
  };

  // WS_RMI_Server_Common contains code common to both
  // WS_RMI_Server and WSS_RMI_Server defined below

  WS_RMI_Server_Common = class WS_RMI_Server_Common {
    constructor(server, host, port, path) {
      // start the server

      this.start = this.start.bind(this);
      // register an object for remote method invocation by the
      // handle_request method (below)

      this.register = this.register.bind(this);
      // parse the request, use the obj_id to look up the
      // corresponding object and invoke the method on the
      // supplied arguments

      this.handle_request = this.handle_request.bind(this);
      this.server = server;
      this.host = host;
      this.port = port;
      this.path = path;
      this.registry = {};
      this.clients = [];
      this.wss = new WebSocket.Server({
        server: this.server
      });
      this.wss.on('connection', (client) => {
        client.on('message', (msg) => {
          return this.handle_request(msg, client);
        });
        client.on('close', () => {
          return log(`client disconnected: ${client._socket.server._connectionKey}`);
        });
        this.clients.push(client);
        return log(`client added: ${client._socket.server._connectionKey}`);
      });
    }

    start() {
      var error;
      try {
        this.server.listen(this.port, this.host);
        return log(`server listening at url: ${this.protocol}://${this.host}:${this.port}`);
      } catch (error1) {
        error = error1;
        return console.log(error);
      }
    }

    register(obj) {
      this.registry[obj.id] = obj;
      log(`registering ${obj.id}`);
      return log(this.registry);
    }

    handle_request(msg, client) {
      var args, cb_id, msg_obj, name, obj_id;
      msg_obj = JSON.parse(msg);
      //console.log msg_obj
      ({obj_id, name, args, cb_id} = msg_obj);
      // args is a list - a splat from the original
      // client side invocation, so we need to "de-splat"
      // here.
      args.push((res) => {
        return client.send(JSON.stringify([cb_id, res]));
      });
      return this.registry[obj_id][name].apply(null, args);
    }

  };

  exports.WS_RMI_Server_Common = WS_RMI_Server_Common;

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3Nfcm1pX3NlcnZlcl9jb21tb24uanMiLCJzb3VyY2VSb290IjoiLi4vLi4iLCJzb3VyY2VzIjpbImJ1aWxkL2NvZmZlZS93c19ybWlfc2VydmVyX2NvbW1vbi5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0VBQUE7Ozs7QUFBQSxNQUFBLG9CQUFBLEVBQUEsU0FBQSxFQUFBOztFQUtBLFNBQUEsR0FBWSxPQUFBLENBQVEsSUFBUjs7RUFFWixHQUFBLEdBQU0sUUFBQSxDQUFDLEdBQUQsQ0FBQTtXQUNKLE9BQU8sQ0FBQyxHQUFSLENBQVksR0FBWjtFQURJLEVBUE47Ozs7O0VBYU0sdUJBQU4sTUFBQSxxQkFBQTtJQUVFLFdBQWEsT0FBQSxNQUFBLE1BQUEsTUFBQSxDQUFBLEVBQUE7OztVQWNiLENBQUEsWUFBQSxDQUFBLGlCQWJFOzs7O1VBdUJGLENBQUEsZUFBQSxDQUFBLG9CQXZCRTs7Ozs7VUFnQ0YsQ0FBQSxxQkFBQSxDQUFBO01BakNjLElBQUMsQ0FBQTtNQUFRLElBQUMsQ0FBQTtNQUFNLElBQUMsQ0FBQTtNQUFNLElBQUMsQ0FBQTtNQUNwQyxJQUFDLENBQUEsUUFBRCxHQUFZLENBQUE7TUFDWixJQUFDLENBQUEsT0FBRCxHQUFXO01BQ1gsSUFBQyxDQUFBLEdBQUQsR0FBTyxJQUFJLFNBQVMsQ0FBQyxNQUFkLENBQXFCO1FBQUEsTUFBQSxFQUFRLElBQUMsQ0FBQTtNQUFULENBQXJCO01BQ1AsSUFBQyxDQUFBLEdBQUcsQ0FBQyxFQUFMLENBQVEsWUFBUixFQUFzQixDQUFDLE1BQUQsQ0FBQSxHQUFBO1FBQ3BCLE1BQU0sQ0FBQyxFQUFQLENBQVUsU0FBVixFQUFxQixDQUFDLEdBQUQsQ0FBQSxHQUFBO2lCQUNuQixJQUFDLENBQUEsY0FBRCxDQUFnQixHQUFoQixFQUFxQixNQUFyQjtRQURtQixDQUFyQjtRQUVBLE1BQU0sQ0FBQyxFQUFQLENBQVUsT0FBVixFQUFtQixDQUFBLENBQUEsR0FBQTtpQkFDakIsR0FBQSxDQUFJLENBQUEscUJBQUEsQ0FBQSxDQUF3QixNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUE5QyxDQUFBLENBQUo7UUFEaUIsQ0FBbkI7UUFFQSxJQUFDLENBQUEsT0FBTyxDQUFDLElBQVQsQ0FBYyxNQUFkO2VBQ0EsR0FBQSxDQUFJLENBQUEsY0FBQSxDQUFBLENBQWlCLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLGNBQXZDLENBQUEsQ0FBSjtNQU5vQixDQUF0QjtJQUpXOztJQWNiLEtBQU8sQ0FBQSxDQUFBO0FBQ0wsVUFBQTtBQUFBO1FBQ0UsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFSLENBQWUsSUFBQyxDQUFBLElBQWhCLEVBQXNCLElBQUMsQ0FBQSxJQUF2QjtlQUNBLEdBQUEsQ0FBSSxDQUFBLHlCQUFBLENBQUEsQ0FBNEIsSUFBQyxDQUFBLFFBQTdCLENBQXNDLEdBQXRDLENBQUEsQ0FBMkMsSUFBQyxDQUFBLElBQTVDLENBQWlELENBQWpELENBQUEsQ0FBb0QsSUFBQyxDQUFBLElBQXJELENBQUEsQ0FBSixFQUZGO09BQUEsY0FBQTtRQUdNO2VBQ0wsT0FBTyxDQUFDLEdBQVIsQ0FBWSxLQUFaLEVBSkQ7O0lBREs7O0lBVVAsUUFBVSxDQUFDLEdBQUQsQ0FBQTtNQUNSLElBQUMsQ0FBQSxRQUFTLENBQUEsR0FBRyxDQUFDLEVBQUosQ0FBVixHQUFvQjtNQUNwQixHQUFBLENBQUksQ0FBQSxZQUFBLENBQUEsQ0FBZSxHQUFHLENBQUMsRUFBbkIsQ0FBQSxDQUFKO2FBQ0EsR0FBQSxDQUFJLElBQUMsQ0FBQSxRQUFMO0lBSFE7O0lBU1YsY0FBZ0IsQ0FBQyxHQUFELEVBQU0sTUFBTixDQUFBO0FBQ2QsVUFBQSxJQUFBLEVBQUEsS0FBQSxFQUFBLE9BQUEsRUFBQSxJQUFBLEVBQUE7TUFBQSxPQUFBLEdBQVUsSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFYLEVBQVY7O01BRUEsQ0FBQSxDQUFFLE1BQUYsRUFBVSxJQUFWLEVBQWdCLElBQWhCLEVBQXNCLEtBQXRCLENBQUEsR0FBZ0MsT0FBaEMsRUFGQTs7OztNQVFBLElBQUksQ0FBQyxJQUFMLENBQVcsQ0FBQyxHQUFELENBQUEsR0FBQTtlQUNULE1BQU0sQ0FBQyxJQUFQLENBQVksSUFBSSxDQUFDLFNBQUwsQ0FBZ0IsQ0FBQyxLQUFELEVBQVEsR0FBUixDQUFoQixDQUFaO01BRFMsQ0FBWDthQUdBLElBQUMsQ0FBQSxRQUFTLENBQUEsTUFBQSxDQUFRLENBQUEsSUFBQSxDQUFLLENBQUMsS0FBeEIsQ0FBOEIsSUFBOUIsRUFBb0MsSUFBcEM7SUFaYzs7RUFuQ2xCOztFQWtEQSxPQUFPLENBQUMsb0JBQVIsR0FBK0I7QUEvRC9CIiwic291cmNlc0NvbnRlbnQiOlsiIyEvYmluL2Vudi8gY29mZmVlXG4jXG4jIHdzX3JtaV9zZXJ2ZXJfY29tbW9uLmNvZmZlZVxuI1xuXG5XZWJTb2NrZXQgPSByZXF1aXJlKCd3cycpXG5cbmxvZyA9IChtc2cpIC0+XG4gIGNvbnNvbGUubG9nKG1zZylcblxuIyBXU19STUlfU2VydmVyX0NvbW1vbiBjb250YWlucyBjb2RlIGNvbW1vbiB0byBib3RoXG4jIFdTX1JNSV9TZXJ2ZXIgYW5kIFdTU19STUlfU2VydmVyIGRlZmluZWQgYmVsb3dcbiNcbmNsYXNzIFdTX1JNSV9TZXJ2ZXJfQ29tbW9uXG5cbiAgY29uc3RydWN0b3I6IChAc2VydmVyLCBAaG9zdCwgQHBvcnQsIEBwYXRoKSAtPlxuICAgIEByZWdpc3RyeSA9IHt9XG4gICAgQGNsaWVudHMgPSBbXVxuICAgIEB3c3MgPSBuZXcgV2ViU29ja2V0LlNlcnZlcihzZXJ2ZXI6IEBzZXJ2ZXIpXG4gICAgQHdzcy5vbignY29ubmVjdGlvbicsIChjbGllbnQpID0+XG4gICAgICBjbGllbnQub24oJ21lc3NhZ2UnLCAobXNnKSA9PlxuICAgICAgICBAaGFuZGxlX3JlcXVlc3QobXNnLCBjbGllbnQpKVxuICAgICAgY2xpZW50Lm9uKCdjbG9zZScsID0+XG4gICAgICAgIGxvZyhcImNsaWVudCBkaXNjb25uZWN0ZWQ6ICN7Y2xpZW50Ll9zb2NrZXQuc2VydmVyLl9jb25uZWN0aW9uS2V5fVwiKSlcbiAgICAgIEBjbGllbnRzLnB1c2goY2xpZW50KVxuICAgICAgbG9nKFwiY2xpZW50IGFkZGVkOiAje2NsaWVudC5fc29ja2V0LnNlcnZlci5fY29ubmVjdGlvbktleX1cIikpXG5cbiAgIyBzdGFydCB0aGUgc2VydmVyXG4gICNcbiAgc3RhcnQ6ID0+XG4gICAgdHJ5XG4gICAgICBAc2VydmVyLmxpc3RlbihAcG9ydCwgQGhvc3QpXG4gICAgICBsb2coXCJzZXJ2ZXIgbGlzdGVuaW5nIGF0IHVybDogI3tAcHJvdG9jb2x9Oi8vI3tAaG9zdH06I3tAcG9ydH1cIilcbiAgICBjYXRjaCBlcnJvclxuICAgICBjb25zb2xlLmxvZyBlcnJvclxuXG4gICMgcmVnaXN0ZXIgYW4gb2JqZWN0IGZvciByZW1vdGUgbWV0aG9kIGludm9jYXRpb24gYnkgdGhlXG4gICMgaGFuZGxlX3JlcXVlc3QgbWV0aG9kIChiZWxvdylcbiAgI1xuICByZWdpc3RlcjogKG9iaikgPT5cbiAgICBAcmVnaXN0cnlbb2JqLmlkXSA9IG9ialxuICAgIGxvZyhcInJlZ2lzdGVyaW5nICN7b2JqLmlkfVwiKVxuICAgIGxvZyhAcmVnaXN0cnkpXG5cbiAgIyBwYXJzZSB0aGUgcmVxdWVzdCwgdXNlIHRoZSBvYmpfaWQgdG8gbG9vayB1cCB0aGVcbiAgIyBjb3JyZXNwb25kaW5nIG9iamVjdCBhbmQgaW52b2tlIHRoZSBtZXRob2Qgb24gdGhlXG4gICMgc3VwcGxpZWQgYXJndW1lbnRzXG4gICNcbiAgaGFuZGxlX3JlcXVlc3Q6IChtc2csIGNsaWVudCkgPT5cbiAgICBtc2dfb2JqID0gSlNPTi5wYXJzZShtc2cpXG4gICAgI2NvbnNvbGUubG9nIG1zZ19vYmpcbiAgICB7IG9ial9pZCwgbmFtZSwgYXJncywgY2JfaWQgfSA9IG1zZ19vYmpcblxuICAgICMgYXJncyBpcyBhIGxpc3QgLSBhIHNwbGF0IGZyb20gdGhlIG9yaWdpbmFsXG4gICAgIyBjbGllbnQgc2lkZSBpbnZvY2F0aW9uLCBzbyB3ZSBuZWVkIHRvIFwiZGUtc3BsYXRcIlxuICAgICMgaGVyZS5cblxuICAgIGFyZ3MucHVzaCggKHJlcykgPT5cbiAgICAgIGNsaWVudC5zZW5kKEpTT04uc3RyaW5naWZ5KCBbY2JfaWQsIHJlc10pKSlcblxuICAgIEByZWdpc3RyeVtvYmpfaWRdW25hbWVdLmFwcGx5KG51bGwsIGFyZ3MpXG5cblxuZXhwb3J0cy5XU19STUlfU2VydmVyX0NvbW1vbiA9IFdTX1JNSV9TZXJ2ZXJfQ29tbW9uXG4iXX0=
//# sourceURL=/home/carruth/git/ws_rmi/build/coffee/ws_rmi_server_common.coffee