"use strict";

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

// Generated by CoffeeScript 2.3.2
(function () {
  var _this = this;

  ({
    constructor: function constructor() {
      this.registry = {};
      this.cnt = 0;
      this.cb_hash = {};
      return this.stubs = [];
    },
    // register an object for multiplex method invocation by the
    // invoke() method (below)

    register: function register(obj) {
      return _this.registry[obj.id] = obj;
    },
    // parse the request, use the obj_id to look up the
    // corresponding object and invoke the method on the
    // supplied arguments

    invoke: function invoke(args, cb) {
      var _JSON$parse, _JSON$parse2;

      var cb_id, method, name, obj, obj_id;
      _this.cb_hash[_this.cnt] = cb;
      _this.cnt += 1;
      obj = _this.registry[args.obj_id];
      return obj[args.name](args.args, function (res) {
        return _this.cb_hash[res.cb_id]();
      }, (_JSON$parse = JSON.parse(msg), _JSON$parse2 = _slicedToArray(_JSON$parse, 4), obj_id = _JSON$parse2[0], name = _JSON$parse2[1], args = _JSON$parse2[2], cb_id = _JSON$parse2[3], _JSON$parse), method = _this.registry[obj_id][name], _this.registry[obj_id][name](args, function (res) {
        return y([cb_id, res]);
      }));
    }
  });
}).call(undefined);

//# sourceURL=/home/carruth/git/ws_rmi/build/coffee/mux.coffee