'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Generated by CoffeeScript 2.3.2
(function () {
  //!/bin/env/ coffee

  // ws_rmi_server.coffee

  // WS_RMI_Server_Common contains code common to both
  // WS_RMI_Server and WSS_RMI_Server defined below

  var WS_RMI_Server, WS_RMI_Server_Common, http;

  WS_RMI_Server_Common = require('./ws_rmi_server_common.coffee').WS_RMI_Server_Common;

  http = require('http');

  // WS_RMI_Server is the insecure version and can be run without root
  // access since it does not require access to the SSL credentials

  WS_RMI_Server = function (_WS_RMI_Server_Common) {
    _inherits(WS_RMI_Server, _WS_RMI_Server_Common);

    function WS_RMI_Server(host, port, path) {
      _classCallCheck(this, WS_RMI_Server);

      var webserver;
      webserver = http.createServer(null);

      var _this = _possibleConstructorReturn(this, (WS_RMI_Server.__proto__ || Object.getPrototypeOf(WS_RMI_Server)).call(this, webserver, host, port, path));

      _this.protocol = 'ws';
      return _this;
    }

    return WS_RMI_Server;
  }(WS_RMI_Server_Common);

  exports.WS_RMI_Server = WS_RMI_Server;
}).call(undefined);

//# sourceURL=/home/carruth/git/ws_rmi/build/coffee/ws_rmi_server.coffee